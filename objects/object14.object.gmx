<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite6</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*instance_create(x-32,y,obj_WallLeft)
instance_create(x+32,y,obj_WallRight)
instance_create(x,y-32,obj_WallUp)
instance_create(x,y+32,obj_WallDown)*/

global.WallCanMove = true
global.WallCanMoveRight = true
global.WallCanMoveDown = true
global.WallCanMoveUp = true


spdNormal = 3
spdZero = 0
spd = spdNormal
jspd = 10
grav = 0.5
hspd = 0
vspd = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.WallCanMoveRight = true{
var RKey = keyboard_check(ord('D'))
}
else
{
var RKey = 0
}
if global.WallCanMove = true{
var LKey = keyboard_check(ord('A'))
}
else
{
var LKey = 0
}

if global.WallCanMoveUp = true{
var UKey = keyboard_check(ord('W'))
}
else
{
var UKey = 0
}
if global.WallCanMoveDown = true{
var DKey = keyboard_check(ord('S'))
}
else
{
var DKey = 0
}
//var DKey = keyboard_check(vk_down)




/*
if place_meeting(x,y+1,obj_Player)
{
vspd = 0
//jumping */
if (UKey)
{
vspd =-jspd
}


if (DKey)
{
vspd =jspd
}



//move right
if (RKey)
{
hspd = spd
}

// move left
if (LKey)
{
hspd =-spd
}

// stop
if (!RKey) and (!LKey) or (LKey) and (RKey){
hspd = 0
}

// stop verti
if (!UKey) and (!DKey) or (UKey) and (DKey){
vspd = 0
}

 

 {
//pixel perfect collision horizontal

if place_meeting(x+(hspd),y,Wall)
{
while !place_meeting(x+sign(hspd),y,Wall)
{
x += sign(hspd)
}
hspd = 0

}
if place_meeting(x+(hspd),y,Obstacle)
{
while !place_meeting(x+sign(hspd),y,Obstacle)
{
x += sign(hspd)
}
hspd = 0

}

if place_meeting(x+(hspd*2),y,object15) 
{
while !place_meeting(x+sign(hspd*2),y,object15)
{
x += sign(hspd*2)

}
//hspd = 0
object15.x += hspd
//object_set_parent
}

}



// give him the power to move left and right
x += hspd


//pixel perfect collision vertical

if place_meeting(x,y+(vspd),Wall) 
{
while !place_meeting(x,y+sign(vspd),Wall)
{
y += sign(vspd)
}
vspd = 0

}
if place_meeting(x,y+(vspd),Obstacle) 
{
while !place_meeting(x,y+sign(vspd),Obstacle)
{
y += sign(vspd)
}
vspd = 0

}

if place_meeting(x,y+vspd*2,object15)
{
while !place_meeting(x, y+sign(vspd*2),object15)
{
y += sign(vspd*2)
}
object15.y += vspd
//vspd = 0

}

// give him the power to move up and down
y += vspd




</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
